from kernel_Perceptron_1 import kernel_Perceptron
import copy
import numpy as np
from numba import jit
import time

class k_class_perceptron_1vRest(object):
	def __init__(self, input_num, train_set, labels, class_num, d, kernel = "poly"):
		self.weights  = [0.0 for _ in range(input_num)]
		self.class_num = class_num
		self.train_set = train_set
		self.labels = labels
		self.kernel = kernel
		self.d = d
		self.classifier_mtx = np.zeros(shape= (class_num, input_num))
	
	def predict(self, input_vector):
		K = self.poly_kernel(input_vector, self.train_set, self.d)
		confident = self.classifier_mtx @ K
		confident = confident.tolist()
		result = confident.index(max(confident))
		print(result)


	def train(self, interation):
		K_train = self.poly_kernel(self.train_set, self.train_set, self.d)
		for i in range(interation):
			error = 0
			for i in range(len(self.train_set)):
				confidence = self.classifier_mtx @ K_train[i]
				for index in range(len(confidence)):
					if(confidence[index]>0):
						if(index != self.labels[i]):
							error += 1
							self.classifier_mtx[index][i] += -1
					if(confidence[index]<=0):
						if(index == self.labels[i]):
							error += 1
							self.classifier_mtx[index][i] += 1
			print(error)

	@jit
	def poly_kernel(self, p, q, d):
		return (p @ q.T)**d

	@jit
	def gaussian_kernel(self, p, q, c):
		K = np.exp(-c * np.linalg.norm(p - q, axis = 1)**2)
		return K